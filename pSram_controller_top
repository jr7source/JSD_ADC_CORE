//////////////////////////////////////////////////////////////////////////////////
// Engineer: Jatin Ramchandani
// 
// Design Name: SIGMA-DELTA LVDS ADC
// Module Name: top
//////////////////////////////////////////////////////////////////////////////////

module top #(
    parameter ADC_WIDTH        = 10,
    parameter ACCUM_BITS       = 12,
    parameter LPF_DEPTH_BITS   = 3,
    parameter INPUT_TOPOLOGY   = "DIRECT"
)(  
    input  wire clk,
    input  wire rst_N,
    input  wire lvds_Analog_in_P,
    input  wire lvds_PWM_in_N,
    output wire analog_out,
    output wire [ADC_WIDTH-1:0] digital_out,
    output wire sample_rdy,

    // Debugging signals
    output wire debug_gamma,
    output wire [ADC_WIDTH+LPF_DEPTH_BITS-1:0] debug_accum,
    output wire [ACCUM_BITS-1:0] debug_sample_count,
    output wire [ADC_WIDTH-1:0] debug_avg,
    output wire debug_accum_valid,
    output wire [12:0] debug_movin_sum,
    output wire [LPF_DEPTH_BITS-1:0] debug_lpf_count,
    output wire [ADC_WIDTH-1:0] debug_lpf_memory,
    output wire debug_lpf_valid
);

    wire LVDS_comparator_output;
    assign LVDS_comparator_output = lvds_Analog_in_P;

    wire clk_S;
    reg gamma;
    always @(posedge clk_S or negedge rst_N)
        if (!rst_N) gamma <= 1'b0;
        else gamma <= LVDS_comparator_output;

    assign analog_out = gamma;

    wire clk_ACCUM;
    reg [ADC_WIDTH+LPF_DEPTH_BITS-1:0] accum = 0;
    reg [ACCUM_BITS-1:0] sample_count = 0;
    reg [ACCUM_BITS-1:0] avg = 0;
    reg accum_valid_flag = 0;

    always @(posedge clk_ACCUM or negedge rst_N) begin
        if (!rst_N) begin
            accum <= 0;
            sample_count <= 0;
            avg <= 0;
            accum_valid_flag <= 0;
        end else begin
            case (sample_count)
                0: accum <= gamma;
                default: accum <= accum + gamma;
            endcase
            sample_count <= sample_count + 1;

            if (sample_count == ((2**ADC_WIDTH) - 1)) begin
                avg <= accum/ACCUM_BITS;
                sample_count <= 0;
                accum_valid_flag <= 1;
            end else begin
                accum_valid_flag <= 0;
            end
        end
    end

    wire clk_LPF;
    reg [12:0] movin_sum = 0;
    reg [LPF_DEPTH_BITS-1:0] lpf_count = 0;
    reg [ADC_WIDTH-1:0] lpf_memory = 0;
    reg lpf_valid = 0;

    always @(posedge clk_LPF or negedge rst_N) begin
        if (!rst_N) begin
            movin_sum <= 0;
            lpf_count <= 0;
            lpf_memory <= 0;
            lpf_valid <= 0;
        end else if (accum_valid_flag) begin
            movin_sum <= movin_sum + avg;
            lpf_count <= lpf_count + 1;
            if (lpf_count == (2**LPF_DEPTH_BITS - 1)) begin
                lpf_memory <= movin_sum >> LPF_DEPTH_BITS;
                lpf_valid <= 1;
                movin_sum <= 0;
                lpf_count <= 0;
            end else begin
                lpf_valid <= 0;
            end
        end
    end

    assign digital_out = lpf_valid ? lpf_memory : {ADC_WIDTH{1'b0}};
    assign sample_rdy = lpf_valid;

    // Debug assignments for functional debugging
    assign debug_gamma = gamma;
    assign debug_accum = accum;
    assign debug_sample_count = sample_count;
    assign debug_avg = avg;
    assign debug_accum_valid = accum_valid_flag;
    assign debug_movin_sum = movin_sum;
    assign debug_lpf_count = lpf_count;
    assign debug_lpf_memory = lpf_memory;
    assign debug_lpf_valid = lpf_valid;

endmodule

